/**
 * Gradle's top-level build file which defines the repositories to pull the dependencies from
 * and the default dependency versions used in most modules.
 *
 * @author Armin Schnabel
 * @version 1.2.2
 * @since 1.0.0
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext {
    groupId = 'de.cyface'
    version = "1.0.2"

    utilsVersion = "1.1.1"

    minSdkVersion = 16
    targetSdkVersion = 28
    compileSdkVersion = 28
    buildToolsVersion = '28.0.3'

    androidxAnnotationVersion = "1.0.0"
    androidxAppCompatVersion = "1.1.0"

    junitVersion = "1.1.1"
    mockitoVersion = "2.26.0"
    hamcrestVersion = "1.3"
    rulesVersion = "1.2.0"
    robolectricVersion = "4.3-alpha-2" // To have ShadowNetworkCapabilities class added in 4.3
    androidxTestCoreVersion = "1.0.0" // as suggested in http://robolectric.org/migrating/#migrating-to-40

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
}

group = ext.groupId

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            // Repository for Cyface libraries
            url 'https://dl.bintray.com/cyface-de/android-utils'
        }
    }
}

apply plugin: 'android-reporting'

configure(subprojects.findAll({ it.name in ["energy_settings"] })) {
    pr ->
        apply plugin: 'com.android.library'
        apply plugin: 'maven-publish'

        group = rootProject.group

        publish.dependsOn 'assemble'

        publishing.publications {
            pr.android.libraryVariants.all { variant ->
                def flavored = !variant.flavorName.isEmpty()
                def variantArtifactId = flavored ? variant.flavorName.replace('_', '-') : project.name
                variantArtifactId += variant.getBuildType().name=='release'?'':variant.getBuildType().name.capitalize()

                def javaDocDestDir = file("${buildDir}/docs/javadoc ${flavored ? variantArtifactId : ""}")

                def sourceDirs = variant.sourceSets.collect {
                    it.javaDirectories // includes Kotlin sources
                }
                def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
                    description "Generates Javadoc for ${variant.name}."
                    source = variant.javaCompileProvider.get().source
                    destinationDir = javaDocDestDir
                    classpath += files(android.getBootClasspath().join(File.pathSeparator))
                    classpath += files(configurations.compile)
                    options.links("http://docs.oracle.com/javase/7/docs/api/")
                    options.links("http://d.android.com/reference/")
                    exclude '**/BuildConfig.java'
                    exclude '**/R.java'
                    failOnError false
                }
                def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
                    description "Puts Javadoc for ${variant.name} in a jar."
                    classifier = 'javadoc'
                    from javadoc.destinationDir
                }
                def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
                    description "Puts sources for ${variant.name} in a jar."
                    from sourceDirs
                    classifier = 'sources'
                }

                "${project.name}${variant.name.capitalize()}${variant.getBuildType().name=='release'?'':variant.getBuildType().name.capitalize()}"(MavenPublication) {
                    groupId project.group
                    artifactId "${project.name}${variantArtifactId.capitalize()}"
                    version android.defaultConfig.versionName
                    artifact(variant.packageLibraryProvider.get().archivePath)
                    artifact(javadocJar)
                    artifact(sourcesJar)
                }
            }
        }
        repositories {
            mavenLocal()
        }
}

task publishAll() {
    subprojects.each { pr ->
        dependsOn {
            pr.tasks.findAll { task -> task.name.startsWith('publish') }
        }
    }
    outputs.upToDateWhen { false }
}
publishAll.outputs.upToDateWhen { false }

// Auto-generated by Android Studio
task clean(type: Delete) {
    delete rootProject.buildDir
}
